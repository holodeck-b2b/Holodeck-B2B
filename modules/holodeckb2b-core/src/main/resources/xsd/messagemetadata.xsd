<?xml version="1.0"?>
<!--

    Copyright (C) 2014 The Holodeck B2B Team, Sander Fieten

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

-->
<xs:schema version="1.1" xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
    targetNamespace="http://holodeck-b2b.org/schemas/2014/06/mmd" attributeFormDefault="unqualified"
    xmlns:tns="http://holodeck-b2b.org/schemas/2014/06/mmd"
    xmlns:xml="http://www.w3.org/XML/1998/namespace">

    <xs:annotation>
        <xs:documentation xml:lang="en">This schema defines the structure of the message meta-data (or short MMD) document used by Holodeck B2B. 
XML documents of this type are used when exchanging messages between Holodeck B2B and the connected business application. When sending the Producer should supply the MMD and when deliverying a message to the Consumer Holodeck B2B will supply the MMD. Note that delivery is done by a delivery class and that it may choose not to supply the MMD because the meta-data is provided otherwise.</xs:documentation>
        <xs:documentation>Version 1.1 of the schema introduces the @deleteFilesAfterSubmit attribute for the eb:PayloadInfo element which can be used to indicate whether the file containing the payload data should be removed after Holodeck B2B has accepted the submission. </xs:documentation>
    </xs:annotation>
    <xs:import namespace="http://www.w3.org/XML/1998/namespace"
        schemaLocation="http://www.w3.org/2001/03/xml.xsd"/>
    <xs:element name="MessageMetaData" type="tns:MessageMetaDataType">
        <xs:annotation>
            <xs:documentation xml:lang="en">A message that needs to be transferred between two business applications translates into a UserMessage message unit in an ebMS v3 message. Therefore the meta data information is structured like the standard ebMS header element for such a message unit. 

When submitting a message for sending the submitter, i.e. the business application, does not need to supply all information. That is because the message exchange is controlled by the P-Mode (see section 4 of the Core Specification, http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/core/ebms_core-3.0-spec.html) which can already define most of the information. 
At least enough information must be supplied to detect which P-Mode Holodeck B2B should use to send the message. Currently it MUST include the P-Mode id for easy and unambigious determination of the P-Mode to use. 

Which other information also must be supplied depends on the completeness of the P-Mode. At least the ConversationId element (child of CollaborationInfo) is REQUIRED as it is a required element in the ebMS message and only known at the business level which means it should be supplied when submitting a message. Also only known to the business level is the actual information to exchange, i.e. the paylaods, therefore the PayloadInfo SHOULD be included in the MMD as well.

This meta data format can also be used by Holodeck B2B when a received user message is delivered to the business application (see org.holodeckb2b.deliverymethod.file.MMDDeliverer). </xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:complexType name="MessageMetaDataType">
        <xs:sequence>
            <xs:annotation>
                <xs:documentation/>
            </xs:annotation>
            <xs:element minOccurs="0" name="MessageInfo">
                <xs:annotation>
                    <xs:documentation>MessageInfo contains some technical details that are used to identify the UserMessage and its relation to another UserMessage. As none of the contained information is required when submitting the user message this element is optional.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:complexContent>
                        <xs:extension base="tns:MessageInfo">
                            <xs:attribute name="mpc" type="tns:non-empty-string">
                                <xs:annotation>
                                    <xs:documentation>The message partition channel the user message is assigned to. As described in the ebMS Core Specification it is not required to specify the MPC. If no MPC is given for a message it assumed to be assigned to the default MPC. 
</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:extension>
                    </xs:complexContent>
                </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="PartyInfo" type="tns:PartyInfo">
                <xs:annotation>
                    <xs:documentation>PartyInfo contains information on the sender and [intended] receiver of the user message. NOTE that the sender and receiver are defined by the roles an MSH acts in when exchanging user messages. These roles are defined in section 2.1.3 of the ebMS Core Specification.
This element is optional as information about the sender and receiver is normally included in the P-Mode configuration and not needed during message submission. When however the P-Mode id is not directly specified in the message meta-data the information in this element can be used for determining the P-Mode to use.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="1" name="CollaborationInfo" type="tns:CollaborationInfo">
                <xs:annotation>
                    <xs:documentation>Meta data about the context of the message exchange, i.e. the business collaboration. Most of the information included in this element can be contained in the P-Mode. The ConversationId child element is however REQUIRED as it indicates the business level conversation the message exchange is part of and which is known only when the message is submitted. 
Also REQUIRED when submitting a message is the P-Mode id in the AgreementRef child element. This enables Holodeck B2B to determine the P-Mode that configures the message processing.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="MessageProperties">
                <xs:annotation>
                    <xs:documentation>Additional user defined, i.e. by the business application, message properties. These properties will not be used by Holodeck B2B to determine the P-Mode.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" ref="tns:Property">
                            <xs:annotation>
                                <xs:documentation>The Property element represents user defined, i.e. non standard, properties. </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="PayloadInfo" type="tns:PayloadInfo" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Information about the payloads of the user message. As the payloads contain the actual business information to exchange normally a user message will contain at least one payload.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="MessageInfo">
        <xs:sequence>
            <xs:element minOccurs="0" name="Timestamp" type="xs:dateTime">
                <xs:annotation>
                    <xs:documentation>The timestamp reflect the time when the message header is created (see ยง5.2.2.1 of the ebMS Core Specification). As the header will be created by Holodeck B2B when sending the message the Timestamp element SHOULD NOT be used when submitting the user message.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="MessageId" type="tns:non-empty-string">
                <xs:annotation>
                    <xs:documentation>The submitter MAY set the MessageId if it requires a specific id. It MUST ensure that the supplied value is a globally unique identifier conforming to the MessageId format as defined in [RFC2822]. When no message-id is specified Holodeck B2B will assign one and return this to the submitter of the message.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="RefToMessageId" type="tns:non-empty-string">
                <xs:annotation>
                    <xs:documentation>Indicates that this user message is a response to another user message. If the submitted message is a response message the RefToMessageId MUST be set by the submitter, Holodeck B2B will not try to detect message relations.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="PartyInfo">
        <xs:sequence>
            <xs:element minOccurs="0" name="From" type="tns:TradingPartner">
                <xs:annotation>
                    <xs:documentation>Contains information about the dentification of the party that is the [intended] sender of the user message, i.e. this is the MSH acting in the Sending role.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="To" type="tns:TradingPartner">
                <xs:annotation>
                    <xs:documentation>Contains information about the dentification of the party that is the receiver of the user message, i.e. this is the MSH acting in the Receiving role.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="TradingPartner">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" name="PartyId" type="tns:PartyId">
                <xs:annotation>
                    <xs:documentation>The PartyId element contains an identifier of the party involved in the message exchange. When identifying business partners a naming scheme can be used. This can be indicated using the type attribute. For more information see section 5.2.2.4 of the ebMS Core Specification.
If this element occurs multiple all instances MUST identify the same business partner. This element can not be used for multi-cast.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="Role" type="tns:non-empty-string">
                <xs:annotation>
                    <xs:documentation>A identification of the business role the party acts in. This is (probably) different from the ebMS role (Sending/Receiving) the party acts in.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="PartyId">
        <xs:simpleContent>
            <xs:extension base="tns:non-empty-string">
                <xs:attribute name="type" type="tns:non-empty-string"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="CollaborationInfo">
        <xs:sequence>
            <xs:element minOccurs="0" name="AgreementRef" type="tns:AgreementRef">
                <xs:annotation>
                    <xs:documentation>This element contains information about the agreement that governs the message exchange. See also section 5.2.2.7 of the ebMS Core Specification. Holodeck B2B uses the pmode attribute from this element to determine which P-Mode configuration governs the message exchange. </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="Service" type="tns:Service">
                <xs:annotation>
                    <xs:documentation>The service that is [supposed] to handle the user message.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="Action" type="xs:token">
                <xs:annotation>
                    <xs:documentation>The operation/activity requested to be executed.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="1" name="ConversationId" type="xs:token">
                <xs:annotation>
                    <xs:documentation>The ConversationId element identifies the business level conversation the message exchange is part of. Because this is only known to the business application it MUST be supplied when the message is submitted. </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="Service">
        <xs:simpleContent>
            <xs:extension base="tns:non-empty-string">
                <xs:attribute name="type" type="tns:non-empty-string" use="optional"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="AgreementRef">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="type" type="tns:non-empty-string" use="optional"/>
                <xs:attribute name="pmode" type="tns:non-empty-string" use="optional"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="PayloadInfo">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" name="PartInfo" type="tns:PartInfo">
                <xs:annotation>
                    <xs:documentation>Information about a specific payload. There is one REQUIRED information element, the location attribute, which MUST contain the location where the data of the payload can be found. </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute default="false" name="deleteFilesAfterSubmit" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>This attribute can be used to indicate whether the files containing the payload data should be removed by Holodeck B2B when the message is succesfully submitted. When not supplied or set to <i>false</i> the <i>Producer</i> application is responsible for deleting the payload file. </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="PartInfo">
        <xs:sequence>
            <xs:element minOccurs="0" name="Schema" type="tns:Schema"/>
            <xs:element minOccurs="0" name="Description" type="tns:Description"/>
            <xs:element minOccurs="0" name="PartProperties" type="tns:PartProperties"/>
        </xs:sequence>
        <xs:attribute default="attachment" name="containment">
            <xs:annotation>
                <xs:documentation>Defines how the payload should be included in the message. There are three options:
1) Include as a SOAP attachment [value="attachment"] - This is default way to package a payload as it can contain both text as well as binary data;
2) Include in the SOAP body [value="body"] - When the payload is an XML document it can be included in the SOAP body. For WS-I conformance there SHOULD only be one payload in the SOAP body;
3) External to the message [value="external"] - The payload is stored at another location and only referred to from within the ebMS message. This option is defined in the ebMS Core Specification, but how such payload must be processed is left to implementation. It is therefor NOT RECOMMENDED to use this containment option.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:normalizedString">
                    <xs:enumeration value="body"/>
                    <xs:enumeration value="attachment"/>
                    <xs:enumeration value="external"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="uri" type="xs:anyURI">
            <xs:annotation>
                <xs:documentation>Each payload included in the user message, with exception of the one included in the SOAP body, is referenced from the ebMS header using the href attribute in the PartInfo element. For external payloads this attribute MUST be supplied and identify the location where the payload is stored.

Because payloads may be related to each other the business application may wish to set these references. It is however RECOMMENDED to use the PartProperties for this. If a reference is given for a payload included as a attachment the uri MUST be a valid MIME Content-id as defined in [RFC2392]. If the reference is for a payload contained in the SOAP body the uri MUST be a valid xml id (as specified in http://www.w3.org/TR/xml-id/). The value of this attribute SHOULD only contain the id itself and no prefix ("cid:" or "#"), Holodeck B2B will add the correct prefix.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="mimeType" type="tns:non-empty-string" use="optional">
            <xs:annotation>
                <xs:documentation>The MIME type of payload content. This is an OPTIONAL attribute, when no MIME type is given Holodeck B2B will try to detect the correct MIME type based on the payload content.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="location" type="xs:anyURI" use="optional">
            <xs:annotation>
                <xs:documentation>The location where Holodeck B2B can retrieve the payload content. This attribute MUST be specified for payloads contained in the message, i.e. containment is body or attachment. Not used for external payloads</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="Schema">
        <xs:attribute name="location" type="xs:anyURI" use="required"/>
        <xs:attribute name="version" type="tns:non-empty-string" use="optional"/>
        <xs:attribute name="namespace" type="tns:non-empty-string" use="optional"/>
    </xs:complexType>
    <xs:complexType name="PartProperties">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="1" ref="tns:Property"/>
        </xs:sequence>
    </xs:complexType>
    <xs:element name="Property" type="tns:Property"/>
    <xs:complexType name="Property">
        <xs:annotation>
            <xs:documentation>NOTE: This type definition differs from the definition of the Property type in the XML Schema Definition from the ebMS Core Specification as this definition includes the type attribute. The ommmision of the type attribute is a known issue to the OASIS TC (see https://tools.oasis-open.org/issues/browse/EBXMLMSG-2) and will be resolved in a future release of the XML Schema. For now it means it is NOT RECOMMENDED to use the type attribute as interoperability between MSHs can not be guaranteed!</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="tns:non-empty-string">
                <xs:attribute name="name" type="tns:non-empty-string" use="required"/>
                <xs:attribute name="type" type="tns:non-empty-string"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="Description">
        <xs:simpleContent>
            <xs:extension base="tns:non-empty-string">
                <xs:attribute ref="xml:lang" use="required"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:simpleType name="non-empty-string">
        <xs:restriction base="xs:string">
            <xs:minLength value="1"/>
        </xs:restriction>
    </xs:simpleType>
</xs:schema>
