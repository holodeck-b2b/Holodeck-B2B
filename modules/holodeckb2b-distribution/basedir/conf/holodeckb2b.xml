<!--                                                                 -->
<!--                   Holodeck B2B Configuration                    -->
<!--                                                                 -->
<holodeckb2b-config>
    <!-- ====================================================================
    - During the message processing a host name may be needed, for example
    - for generating a message id. Because the host name of the machine
    - Holodeck B2B runs on may be for internal use only it is possible to set
    - an external host name using this parameter.
    ===================================================================== -->
    <!-- <parameter name="ExternalHostName"/> -->
    
    <!-- ====================================================================
    - Holodeck B2B uses workers to execute recurring tasks like for example
    - cleaning up the message meta-data for old messages. These "workers"
    - are configured in a separate configuration file which is pointed to
    - by the following parameter. If no value is specified here,
    - «HB2B_HOME»/conf/workers.xml will be used
    ===================================================================== -->
    <!-- <parameter name="WorkerConfig"/>-->
    
    <!-- ====================================================================
    - This parameter sets the directory that should be used for temporarily
    - storing data. If it is not set here a "temp" directory is created
    - in the "repository" directory of the Holodeck B2B install
    ===================================================================== -->
    <!-- <parameter name="TempDir"/> -->
    
    <!-- ====================================================================
    - This parameter contains the global setting for the strict validation
    - of message headers. By default Holodeck B2B only performs a basic 
    - validation of the header to ensure it will be able to process the 
    - message without checking all constraints defined in the protocol 
    - specification. In strict validation mode these constraints are checked.
    - The strict validation can be specified here for all exchanges at once
    - or per exchange in the P-Mode.   
    ===================================================================== -->
    <!-- <parameter name="StrictHeaderValidation"/> -->	
    
    <!-- ====================================================================
    - This parameter contains the default setting whether Errors on Errors
    - should be reported to the sender of the faulty error. This setting can
    - be overriden in the P-Mode configuration. However the problem that
    - causes an error to be in error is often an invalid message reference.
    - In such cases the error can not be assigned a P-Mode, so the P-Mode can
    - not configure the behaviour and this default setting is used.
    ===================================================================== -->
    <parameter name="ReportErrorOnError">false</parameter>
    
    <!-- ====================================================================
    - This parameter contains the default setting whether Errors on Receipts
    - should be reported to the sender of the receipt in error. This setting
    - can be overriden in the P-Mode configuration.
    ===================================================================== -->
    <parameter name="ReportErrorOnReceipt">false</parameter>    
    
    <!-- ================================================= -->
    <!-- Transport Ins -->
    <!-- ================================================= -->
    <transportReceiver name="http"
        class="org.holodeckb2b.core.axis2.HTTPListener">
        <parameter name="port">8080</parameter>
        <!-- Here is the complete list of supported parameters (see example settings further below):
            port: the port to listen on (default 6060)
            requestTimeout:  value in millis of time that requests can wait for data                                (default 20000)
            requestTcpNoDelay:  true to maximize performance and minimize latency                                   (default true)
                                false to minimize bandwidth consumption by combining segments
            requestCoreThreadPoolSize:  number of threads available for request processing (unless queue fills up)  (default 25)
            requestMaxThreadPoolSize:  number of threads available for request processing if queue fills up         (default 150)
                                       note that default queue never fills up:  see HttpFactory
            threadKeepAliveTime:  time to keep threads in excess of core size alive while inactive                  (default 180)
                                  note that no such threads can exist with default unbounded request queue
            threadKeepAliveTimeUnit:  TimeUnit of value in threadKeepAliveTime (default SECONDS)                    (default SECONDS)
        -->
        <!-- <parameter name="requestTimeout">10000</parameter>                   -->
        <!-- <parameter name="requestTcpNoDelay">false</parameter>                   -->
        <!-- <parameter name="requestCoreThreadPoolSize">50</parameter>                      -->
        <!-- <parameter name="requestMaxThreadPoolSize">100</parameter>                     -->
        <!-- <parameter name="threadKeepAliveTime">240000</parameter>                  -->
        <!-- <parameter name="threadKeepAliveTimeUnit">MILLISECONDS</parameter>            -->
    </transportReceiver>    
    
    
    <!-- ========================================================-->
    <!-- Axis2 parameters, chnanging any of the parameters below -->
    <!-- may cause Holodeck B2B to stop functioning correctly,   -->
    <!-- so handle with care!                                    -->
    <!-- ========================================================-->
    <parameter name="hotdeployment">false</parameter>
    <parameter name="hotupdate">false</parameter>
    <parameter name="enableMTOM">false</parameter>
    <parameter name="enableSwA">true</parameter>

    <!--Uncomment if you want to enable file caching for attachments -->
    <!--parameter name="cacheAttachments">true</parameter>
    <parameter name="attachmentDIR"></parameter>
    <parameter name="sizeThreshold">4000</parameter-->
    
    <parameter name="EnableChildFirstClassLoading">false</parameter>

    <!--Uncomment if you want to plugin your own attachments lifecycle implementation -->
    <!--<attachmentsLifecycleManager class="org.apache.axiom.attachments.lifecycle.impl.LifecycleManagerImpl"/>-->

    <!--This will give out the timout of the configuration contexts, in milliseconds-->
    <parameter name="ConfigContextTimeoutInterval">30000</parameter>

    <!--During a fault, stack trace can be sent with the fault message. The following flag will control -->
    <!--that behavior.-->
    <parameter name="sendStacktraceDetailsWithFaults">false</parameter>

    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
    <parameter name="DrillDownToRootCauseForFaultReason">false</parameter>

    <parameter name="userName">admin</parameter>
    <parameter name="password">axis2</parameter>

    <parameter name="contextRoot"/> <!-- axis2</parameter>-->
    <parameter name="servicePath">holodeckb2b</parameter>

    <!--Service deployer , this will alow users to deploy AAR or exploded AAR as axis2 services-->
    <deployer extension=".aar" directory="services" class="org.apache.axis2.deployment.ServiceDeployer"/>

    <threadContextMigrators>
        <threadContextMigrator listId="JAXWS-ThreadContextMigrator-List"
                               class="org.apache.axis2.jaxws.addressing.migrator.EndpointContextMapMigrator"/>
    </threadContextMigrators>

    <!-- ================================================= -->
    <!-- Message Receivers -->
    <!-- ================================================= -->
    <!--This is the default MessageReceiver for the system , if you want to have MessageReceivers for -->
    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
    <!--any operation -->
    <!--Note : You can override this for a particular service by adding the same element with your requirement-->
    <messageReceivers>
        <messageReceiver mep="http://www.w3.org/ns/wsdl/in-only"
                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
        <messageReceiver mep="http://www.w3.org/ns/wsdl/in-out"
                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
    </messageReceivers>

    <!-- ================================================= -->
    <!-- Message Formatter -->
    <!-- ================================================= -->
    <!--Following content type to message formatter mapping can be used to implement support for different message -->
    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
    <messageFormatters>
        <messageFormatter contentType="application/soap+xml"
            class="org.apache.axis2.kernel.http.SOAPMessageFormatter"/>
    </messageFormatters>

    <!-- ================================================= -->
    <!-- Message Builders -->
    <!-- ================================================= -->
    <!--Following content type to builder mapping can be used to implement support for different message -->
    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
    <messageBuilders>
        <messageBuilder contentType="application/xml"
                        class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
    </messageBuilders>

    <!-- This is where you'd put custom transports.  See the transports project -->
    <!-- for more.  http://ws.apache.org/commons/transport                      -->

    <!-- ================================================= -->
    <!-- Transport Outs -->
    <!-- ================================================= -->
    <transportSender name="http"
        class="org.holodeckb2b.core.axis2.HTTPTransportSender">
        <parameter name="PROTOCOL">HTTP/1.1</parameter>
        <parameter name="Transfer-Encoding">chunked</parameter>

        <!-- If following is set to 'true', optional action part of the Content-Type will not be added to the SOAP 1.2 messages -->
        <!--  <parameter name="OmitSOAP12Action">true</parameter>  -->
    </transportSender>   

    <!-- ================================================= -->
    <!-- Phases  -->
    <!-- ================================================= -->
    <phaseOrder type="InFlow">
        <phase name="Transport"/>
        <phase name="Addressing"/>
        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
            <handler name="RequestURIBasedDispatcher"
                class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
            <handler name="SOAPActionBasedDispatcher"
                class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
            <handler name="RequestURIOperationDispatcher"
                class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
            <handler name="SOAPMessageBodyBasedDispatcher"
                class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
            <handler name="HTTPLocationBasedDispatcher"
                class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
        </phase>
        <phase name="ExceptionHandling"/>
        <phase name="Logging"/>
        <phase name="ProtocolParsing"/>        
        <phase name="Security"/>
        <phase name="ProtocolProcessing"/>        
        <phase name="CoreProcessing"/>
        <phase name="ProtocolResponseHandling"/>
    </phaseOrder>
    <phaseOrder type="OutFlow">
        <phase name="CoreProcessing"/>
        <phase name="ProtocolProcessing"/>        
        <phase name="Security"/>
        <phase name="Transport"/>        
        <phase name="Logging"/>
        <phase name="MessageOut"/>
    </phaseOrder>
    <phaseOrder type="InFaultFlow">
        <phase name="Transport"/>
        <phase name="Addressing"/>
        <phase name="PreDispatch"/>
        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase"/>   
        <phase name="ExceptionHandling"/>
        <phase name="Logging"/>
        <phase name="ProtocolParsing"/>        
        <phase name="Security"/>
        <phase name="ProtocolProcessing"/>        
        <phase name="CoreProcessing"/>
        <phase name="ProtocolResponseHandling"/>      
    </phaseOrder>
    <phaseOrder type="OutFaultFlow">
        <phase name="CoreProcessing"/>
        <phase name="ProtocolProcessing"/>        
        <phase name="Security"/>
        <phase name="Transport"/>        
        <phase name="Logging"/>
        <phase name="MessageOut"/>
    </phaseOrder>
</holodeckb2b-config>

